#pragma kernel CSMain

float time = 0;
RWTexture2D<float4> result;

struct Ray {
	float3 origin;
	float3 direction;
};

struct Material {
	float3 color;
	float diffuse;
	float specular;
};

struct Hit {
	float length;
	float3 normal;
	Material material;
};

struct Light {
	float3 color;
	float3 direction;
};

struct Sphere {
	float radius;
	float3 position;
	Material material;
};

struct Plane {
	float3 normal;
	float3 position;
	Material material;
};


static const float gloss = 30;
static const float exposure = 1e-2;
static const float gamma = 2.2;
static const float epsilon = 1e-3;
static Hit miss = { 0,float3(0,0,0),{float3(0,0,0),0,0} };
static const int interations = 16;
static const float intensity = 100;
static const float3 ambient = float3(0.6, 0.9, 1.0)*intensity / gamma;
static const Light light = { float3(1,1,1)*intensity,normalize(float3(-1.2,0.78,-2.0)) };//direction is from object to light
//scene objects
static Sphere spheres[] = {
{ 1,float3(-5+cos(time),3 + sin(time),8),{ float3(0.1,1,0.3),0.9,0.05 } },
{2,float3(2 ,4,6.5 + cos(time)),{ float3(1,1,0.5),0.4,0.6 }},
{ 3,float3(4 + cos(time),1,2.2),{ float3(0.1,0.2,1),1,0.5 } },
{ 2,float3(-6,3 + sin(time),2),{ float3(1,0.1,0.2),1,0.201 } },
{ 1,float3(-1,0.8,-1),{ float3(0.8,0.9,1),0.9,0.4 } },
};
static Plane planes[] = {
	{ float3(0,1,0),float3(0,-2.5,0),{float3(1,1,1),1,0.1} },
};

Hit Intersect(Ray ray, Plane plane) {
	float len = dot(plane.position - ray.origin, plane.normal) / dot(ray.direction, plane.normal);
	if (len < 0) return miss;
	Hit hit = { len,plane.normal,plane.material };
	return hit;
}

Hit Intersect(Ray ray, Sphere sphere) {
	float3 oc = sphere.position - ray.origin;
	float l = dot(ray.direction, oc);
	float det = l*l - dot(oc, oc) + sphere.radius*sphere.radius;
	if (det < 0.0) return miss;

	float len = l - sqrt(det);
	if (len < 0.0) len = l + sqrt(det);
	if (len < 0.0) return miss;
	Hit hit = { len, (ray.origin + len*ray.direction - sphere.position) / sphere.radius, sphere.material };
	return hit;
}

Hit Trace(Ray ray) {
	int i;
	Hit hit = miss;

	for (i = 0; i < 1; i++) {
		Hit planeHit = Intersect(ray, planes[i]);
		if (planeHit.material.diffuse > 0 || planeHit.material.specular > 0)
			hit = planeHit;
	}

	for (i = 0; i < 5; i++) {
		Hit sphereHit = Intersect(ray, spheres[i]);
		if (sphereHit.material.diffuse > 0 || sphereHit.material.specular > 0)
			hit = sphereHit;
	}

	return hit;
}

float3 Radiance(Ray ray) {
	float3 color = float3(0.0, 0.0, 0.0), fresnel = float3(0.0, 0.0, 0.0);
	float3 mask = float3(1.0, 1.0, 1.0);

	for (int i = 0; i <= interations; i++) {
		Hit hit = Trace(ray);
		//hit primitive
		if (hit.material.diffuse > 0 || hit.material.specular > 0) {

			float3 r0 = hit.material.color.rgb * hit.material.specular;
			float hv = clamp(dot(hit.normal, -ray.direction), 0.0, 1.0);
			fresnel = r0 + (1.0 - r0) * pow(1.0 - hv, 5.0);
			mask *= fresnel;

			Ray shadowRay = { ray.origin + hit.length * ray.direction + epsilon * light.direction, light.direction };
			Hit shadowHit = Trace(shadowRay);
			if (shadowHit.length == 0.0) {//shadow ray miss
				float NL = clamp(dot(hit.normal, light.direction), 0.0, 1.0);
				float3 albedo = NL * light.color * hit.material.color.rgb * hit.material.diffuse;
				color += albedo * (1.0 - fresnel) * mask / fresnel;
			}

			float3 reflection = reflect(ray.direction, hit.normal);
			Ray reflectionRay = { ray.origin + hit.length * ray.direction + epsilon * reflection, reflection };
			ray = reflectionRay;
		}
		else {
			//miss

			float3 spotlight = float3(1e6, 1e6, 1e6) * pow(abs(dot(ray.direction, light.direction)), 300.0);
			color += mask * (ambient + spotlight); break;
		}
	}

	return color;
}


[numthreads(8, 8, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	float width, height;
	result.GetDimensions(width, height);

	float x = id.x / height - 0.5*width / height;
	float y = id.y / height - 0.5;

	Ray ray = { float3(0, 1, -10), normalize(float3(x, y, 1)) };//camera position

	result[id.xy] = float4(pow(abs(Radiance(ray) * exposure), float3(1.0 / gamma, 1.0 / gamma, 1.0 / gamma)), 1.0);
}
